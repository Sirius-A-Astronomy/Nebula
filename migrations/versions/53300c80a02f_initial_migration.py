"""Initial Migration.

Revision ID: 53300c80a02f
Revises: 
Create Date: 2023-03-28 11:44:25.131811

"""
from alembic import op
import sqlalchemy as sa
import nebula


# revision identifiers, used by Alembic.
revision = '53300c80a02f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('course_level',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('study_type', sa.String(length=64), nullable=False),
    sa.Column('code', sa.String(length=16), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('subject_tag',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('user',
    sa.Column('first_name', sa.String(length=128), nullable=True),
    sa.Column('last_name', sa.String(length=128), nullable=True),
    sa.Column('email', sa.String(length=128), nullable=False),
    sa.Column('access_level', sa.Integer(), nullable=False),
    sa.Column('password', sa.String(length=300), nullable=False),
    sa.Column('is_authenticated', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_anonymous', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('course',
    sa.Column('name', sa.String(length=128), nullable=False),
    sa.Column('code', sa.String(length=16), nullable=False),
    sa.Column('semester', sa.String(length=16), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('course_level_uuid', nebula.models.GUID(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['course_level_uuid'], ['course_level.uuid'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('code')
    )
    op.create_table('notification',
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('link', sa.String(length=256), nullable=True),
    sa.Column('link_text', sa.String(length=256), nullable=True),
    sa.Column('category', sa.String(length=64), nullable=False),
    sa.Column('user_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question',
    sa.Column('title', sa.String(length=256), nullable=False),
    sa.Column('difficulty', sa.Integer(), nullable=True),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('reviewed', sa.Integer(), nullable=True),
    sa.Column('reviewed_by_uuid', nebula.models.GUID(), nullable=True),
    sa.Column('sources', sa.Text(), nullable=True),
    sa.Column('course_uuid', nebula.models.GUID(), nullable=True),
    sa.Column('user_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['course_uuid'], ['course.uuid'], ),
    sa.ForeignKeyConstraint(['reviewed_by_uuid'], ['user.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answer',
    sa.Column('title', sa.String(length=256), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('approved', sa.Boolean(), nullable=False),
    sa.Column('sources', sa.PickleType(), nullable=True),
    sa.Column('user_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('question_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['question_uuid'], ['question.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('comment',
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('is_suggestion', sa.Boolean(), nullable=False),
    sa.Column('user_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('question_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['question_uuid'], ['question.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subject_tags',
    sa.Column('subject_tag_uuid', nebula.models.GUID(), nullable=True),
    sa.Column('question_uuid', nebula.models.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['question_uuid'], ['question.uuid'], ),
    sa.ForeignKeyConstraint(['subject_tag_uuid'], ['subject_tag.uuid'], )
    )
    op.create_table('subscription',
    sa.Column('question_uuid', nebula.models.GUID(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('uuid', nebula.models.GUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['question_uuid'], ['question.uuid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscriptions',
    sa.Column('user_uuid', nebula.models.GUID(), nullable=True),
    sa.Column('subscription_uuid', nebula.models.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['subscription_uuid'], ['subscription.uuid'], ),
    sa.ForeignKeyConstraint(['user_uuid'], ['user.uuid'], )
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('subscriptions')
    op.drop_table('subscription')
    op.drop_table('subject_tags')
    op.drop_table('comment')
    op.drop_table('answer')
    op.drop_table('question')
    op.drop_table('notification')
    op.drop_table('course')
    op.drop_table('user')
    op.drop_table('subject_tag')
    op.drop_table('course_level')
    # ### end Alembic commands ###
